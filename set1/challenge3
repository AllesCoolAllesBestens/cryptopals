#!/bin/env python2
from Crypto.Util.strxor import strxor_c
import itertools
import collections

text = '1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736'

def getMostProbableEnglishString(text):
    englishLetterFreq = {' ': 1, 'E': 12.70, 'T': 9.06, 'A': 8.17, 'O': 7.51, 'I': 6.97, 'N': 6.75, 'S': 6.33, 'H': 6.09, 'R': 5.99, 'D': 4.25, 'L': 4.03, 'C': 2.78, 'U': 2.76, 'M': 2.41, 'W': 2.36, 'F': 2.23, 'G': 2.02, 'Y': 1.97, 'P': 1.93, 'B': 1.29, 'V': 0.98, 'K': 0.77, 'J': 0.15, 'X': 0.15, 'Q': 0.10, 'Z': 0.07}

    bestString = ""
    bestStringMetric = 0

    for char in range(0,128):    # a-z
        dec = strxor_c(text.decode('hex'), char)
        declen = len(dec)
        letters = collections.Counter(dec)
        sum = 0
        for letter in letters:
            if letter.upper() in englishLetterFreq:
                sum += (float(letters[letter])/float(declen)) * englishLetterFreq[letter.upper()]
            else:
                sum -= 0.4

        if sum > bestStringMetric:
            bestStringMetric = sum
            bestString = dec

    return bestString, bestStringMetric


print getMostProbableEnglishString(text)
